{"ast":null,"code":"var _jsxFileName = \"/Users/pranavmody/playdaily-app1/src/TriviaGame/Game.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport triviaData from './trivia-data';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Game() {\n  _s();\n  // Initialize state within the component using useState\n  const [gameState, setGameState] = useState({\n    score: 0,\n    triviaIndex: 0,\n    isGameOver: false\n  });\n\n  // Destructure the required values from gameState\n  const {\n    score,\n    triviaIndex,\n    isGameOver\n  } = gameState;\n\n  // Function to go to the next trivia question\n  const handleNextQuestion = () => {\n    if (triviaIndex < triviaData.length - 1) {\n      setGameState({\n        ...gameState,\n        triviaIndex: triviaIndex + 1\n      });\n    } else {\n      // Optionally, handle what happens when there are no more questions\n      setGameState({\n        ...gameState,\n        isGameOver: true\n      });\n    }\n  };\n\n  // Handle the case where triviaData might be empty or index is out of range\n  const TriviaQuestion = triviaData[triviaIndex] || {};\n  const {\n    correct_answer,\n    incorrect_answers,\n    question\n  } = TriviaQuestion;\n\n  // Render the component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Game\",\n    children: !isGameOver && TriviaQuestion ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Correct Answer: \", correct_answer]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Incorrect Answers:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this), incorrect_answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: answer\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextQuestion,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No more questions or game is over.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n_s(Game, \"R/ZIXZL56WaZ5Y2RI9Cn9K8FwJ4=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["useState","triviaData","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","gameState","setGameState","score","triviaIndex","isGameOver","handleNextQuestion","length","TriviaQuestion","correct_answer","incorrect_answers","question","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","answer","index","onClick","_c","$RefreshReg$"],"sources":["/Users/pranavmody/playdaily-app1/src/TriviaGame/Game.js"],"sourcesContent":["import { useState } from 'react';\nimport triviaData from './trivia-data';\n\nfunction Game() {\n    // Initialize state within the component using useState\n    const [gameState, setGameState] = useState({\n        score: 0,\n        triviaIndex: 0,\n        isGameOver: false,\n    });\n\n    // Destructure the required values from gameState\n    const { score, triviaIndex, isGameOver } = gameState;\n\n    // Function to go to the next trivia question\n    const handleNextQuestion = () => {\n        if (triviaIndex < triviaData.length - 1) {\n            setGameState({\n                ...gameState,\n                triviaIndex: triviaIndex + 1,\n            });\n        } else {\n            // Optionally, handle what happens when there are no more questions\n            setGameState({\n                ...gameState,\n                isGameOver: true,\n            });\n        }\n    };\n\n    // Handle the case where triviaData might be empty or index is out of range\n    const TriviaQuestion = triviaData[triviaIndex] || {};\n    const { correct_answer, incorrect_answers, question } = TriviaQuestion;\n\n    // Render the component\n    return (\n        <div className=\"Game\">\n            {!isGameOver && TriviaQuestion ? (\n                <>\n                    <p>{question}</p>\n                    <p>Correct Answer: {correct_answer}</p>\n                    <div>Incorrect Answers:</div>\n                    {incorrect_answers.map((answer, index) => (\n                        <p key={index}>{answer}</p>\n                    ))}\n                    <button onClick={handleNextQuestion}>Next Question</button>\n                </>\n            ) : (\n                <p>No more questions or game is over.</p>\n            )}\n        </div>\n    );\n}\n\nexport default Game;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,UAAU,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvC,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACZ;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC;IACvCU,KAAK,EAAE,CAAC;IACRC,WAAW,EAAE,CAAC;IACdC,UAAU,EAAE;EAChB,CAAC,CAAC;;EAEF;EACA,MAAM;IAAEF,KAAK;IAAEC,WAAW;IAAEC;EAAW,CAAC,GAAGJ,SAAS;;EAEpD;EACA,MAAMK,kBAAkB,GAAGA,CAAA,KAAM;IAC7B,IAAIF,WAAW,GAAGV,UAAU,CAACa,MAAM,GAAG,CAAC,EAAE;MACrCL,YAAY,CAAC;QACT,GAAGD,SAAS;QACZG,WAAW,EAAEA,WAAW,GAAG;MAC/B,CAAC,CAAC;IACN,CAAC,MAAM;MACH;MACAF,YAAY,CAAC;QACT,GAAGD,SAAS;QACZI,UAAU,EAAE;MAChB,CAAC,CAAC;IACN;EACJ,CAAC;;EAED;EACA,MAAMG,cAAc,GAAGd,UAAU,CAACU,WAAW,CAAC,IAAI,CAAC,CAAC;EACpD,MAAM;IAAEK,cAAc;IAAEC,iBAAiB;IAAEC;EAAS,CAAC,GAAGH,cAAc;;EAEtE;EACA,oBACIZ,OAAA;IAAKgB,SAAS,EAAC,MAAM;IAAAC,QAAA,EAChB,CAACR,UAAU,IAAIG,cAAc,gBAC1BZ,OAAA,CAAAE,SAAA;MAAAe,QAAA,gBACIjB,OAAA;QAAAiB,QAAA,EAAIF;MAAQ;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjBrB,OAAA;QAAAiB,QAAA,GAAG,kBAAgB,EAACJ,cAAc;MAAA;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvCrB,OAAA;QAAAiB,QAAA,EAAK;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAC5BP,iBAAiB,CAACQ,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACjCxB,OAAA;QAAAiB,QAAA,EAAgBM;MAAM,GAAdC,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAC7B,CAAC,eACFrB,OAAA;QAAQyB,OAAO,EAAEf,kBAAmB;QAAAO,QAAA,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,eAC7D,CAAC,gBAEHrB,OAAA;MAAAiB,QAAA,EAAG;IAAkC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAC3C;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACjB,EAAA,CAjDQD,IAAI;AAAAuB,EAAA,GAAJvB,IAAI;AAmDb,eAAeA,IAAI;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
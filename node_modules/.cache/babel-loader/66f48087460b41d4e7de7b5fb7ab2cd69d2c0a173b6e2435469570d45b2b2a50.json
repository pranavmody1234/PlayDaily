{"ast":null,"code":"var _jsxFileName = \"/Users/pranavmody/playdaily-app1/src/TriviaGame/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport triviaData from './trivia-data';\nimport './trivia_game.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Game() {\n  _s();\n  const [gameState, setGameState] = useState({\n    score: 0,\n    triviaIndex: 0,\n    isGameOver: false,\n    userAnswer: null,\n    correct: null,\n    questionsAnswered: 0,\n    answered: false // Track if the current question has been answered\n  });\n  const {\n    score,\n    triviaIndex,\n    isGameOver,\n    userAnswer,\n    correct,\n    questionsAnswered,\n    answered\n  } = gameState;\n  const TriviaQuestion = triviaData[triviaIndex] || {};\n  const {\n    correct_answer,\n    incorrect_answers,\n    question\n  } = TriviaQuestion;\n\n  // Handle answer button click\n  const handleAnswerClick = answer => {\n    if (!answered) {\n      // Prevent further clicks once answered\n      const isCorrect = answer === correct_answer;\n      setGameState({\n        ...gameState,\n        userAnswer: answer,\n        correct: isCorrect,\n        score: isCorrect ? score + 1 : score,\n        questionsAnswered: questionsAnswered + 1,\n        answered: true\n      });\n    }\n  };\n\n  // Function to go to the next trivia question\n  const handleNextQuestion = () => {\n    if (triviaIndex < triviaData.length - 1) {\n      setGameState({\n        ...gameState,\n        triviaIndex: triviaIndex + 1,\n        userAnswer: null,\n        correct: null,\n        answered: false // Reset for the next question\n      });\n    } else {\n      setGameState({\n        ...gameState,\n        isGameOver: true\n      });\n    }\n  };\n\n  // Render the component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Current Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coins-container\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"coin-value\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"Questions Answered: \", score]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 50\n          }, this), questionsAnswered]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), !isGameOver && TriviaQuestion ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"optionbox\",\n        children: [correct_answer, ...incorrect_answers].sort().map((answer, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswerClick(answer),\n          className: \"options\",\n          disabled: answered // Disable buttons once answered\n          ,\n          children: answer\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), userAnswer && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: correct ? \"correct-answer\" : \"wrong-answer\",\n        children: correct ? \"Correct Answer!\" : `Wrong Answer! Correct was: ${correct_answer}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextQuestion,\n        className: \"nextButton\",\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No more questions or game is over.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s(Game, \"vi23Gm7RiXyW7cFuO/9lVYR1Bfg=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","triviaData","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","gameState","setGameState","score","triviaIndex","isGameOver","userAnswer","correct","questionsAnswered","answered","TriviaQuestion","correct_answer","incorrect_answers","question","handleAnswerClick","answer","isCorrect","handleNextQuestion","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","sort","map","index","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/pranavmody/playdaily-app1/src/TriviaGame/Game.js"],"sourcesContent":["import React, { useState } from 'react';\nimport triviaData from './trivia-data';\nimport './trivia_game.css';\n\nfunction Game() {\n    const [gameState, setGameState] = useState({\n        score: 0,\n        triviaIndex: 0,\n        isGameOver: false,\n        userAnswer: null,\n        correct: null,\n        questionsAnswered: 0,\n        answered: false,  // Track if the current question has been answered\n    });\n\n    const { score, triviaIndex, isGameOver, userAnswer, correct, questionsAnswered, answered } = gameState;\n\n    const TriviaQuestion = triviaData[triviaIndex] || {};\n    const { correct_answer, incorrect_answers, question } = TriviaQuestion;\n\n    // Handle answer button click\n    const handleAnswerClick = (answer) => {\n        if (!answered) {  // Prevent further clicks once answered\n            const isCorrect = answer === correct_answer;\n            setGameState({\n                ...gameState,\n                userAnswer: answer,\n                correct: isCorrect,\n                score: isCorrect ? score + 1 : score,\n                questionsAnswered: questionsAnswered + 1,\n                answered: true,\n            });\n        }\n    };\n\n    // Function to go to the next trivia question\n    const handleNextQuestion = () => {\n        if (triviaIndex < triviaData.length - 1) {\n            setGameState({\n                ...gameState,\n                triviaIndex: triviaIndex + 1,\n                userAnswer: null,\n                correct: null,\n                answered: false,  // Reset for the next question\n            });\n        } else {\n            setGameState({\n                ...gameState,\n                isGameOver: true,\n            });\n        }\n    };\n\n    // Render the component\n    return (\n        <div className=\"Game\">\n            <div className=\"header-container\">\n                <h1>Current Score: {score}</h1>\n                <div className=\"coins-container\">\n                    <span className=\"coin-value\"><h1>Questions Answered: {score}</h1>{questionsAnswered}</span>\n                </div>\n            </div>\n            {!isGameOver && TriviaQuestion ? (\n                <>\n                    <p>{question}</p>\n                    <div className='optionbox'>\n                        {[correct_answer, ...incorrect_answers].sort().map((answer, index) => (\n                            <button\n                                key={index}\n                                onClick={() => handleAnswerClick(answer)}\n                                className='options'\n                                disabled={answered}  // Disable buttons once answered\n                            >\n                                {answer}\n                            </button>\n                        ))}\n                    </div>\n                    {userAnswer && (\n                        <p className={correct ? \"correct-answer\" : \"wrong-answer\"}>\n                            {correct ? \"Correct Answer!\" : `Wrong Answer! Correct was: ${correct_answer}`}\n                        </p>\n                    )}\n                    <button onClick={handleNextQuestion} className=\"nextButton\">Next Question</button>\n                </>\n            ) : (\n                <p>No more questions or game is over.</p>\n            )}\n        </div>\n    );\n}\n\nexport default Game;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}